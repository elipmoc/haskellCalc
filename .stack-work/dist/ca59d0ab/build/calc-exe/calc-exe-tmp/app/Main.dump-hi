
==================== FINAL INTERFACE ====================
2017-11-04 15:03:25.5211281 UTC

interface main@main:Main 8002
  interface hash: 9a05da414eeddecbea4d5b9b6e2ddeb4
  ABI hash: 36f848c5a39ecc07cdcf0d0783cecbf0
  export-list hash: 2f7d06395d2fbd07eb8c1096ff051fd4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 956e38a2cb7097b9218b9b1e53d30d64
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.binaryExpr
  Main.foldingFunction
  Main.main
  Main.next
  Main.readMaybe
  Main.solveRPN
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Monad f915f187cea611986ebb12dbc69279ab
import  -/  base-4.9.1.0:Data.Functor 682cc832c233b71cec70179490a08631
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Read 823163de9fa29f31f251382abc171b2b
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  base-4.9.1.0:Text.Read 3cc85705eeac93ec93da7f5edfd7bc15
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
47e755c16b514d1756e19f67dbdc3819
  binaryExpr ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Base.String
    -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><S,U> -}
bb568e73cace0edf245f08cbf7996a09
  foldingFunction ::
    [GHC.Types.Double]
    -> GHC.Base.String -> GHC.Base.Maybe [GHC.Types.Double]
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: (\ (s :: [GHC.Types.Double]) (op :: GHC.Base.String) ->
                 let {
                   fail :: GHC.Prim.Void# -> GHC.Base.Maybe [GHC.Types.Double]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     case Text.ParserCombinators.ReadP.run
                            @ GHC.Types.Double
                            Main.foldingFunction1
                            op of wild {
                       [] -> GHC.Base.Nothing @ [GHC.Types.Double]
                       : ds1 ds2
                       -> case ds1 of wild1 { (,) x ds3 ->
                          case ds3 of wild2 {
                            []
                            -> case ds2 of wild3 {
                                 []
                                 -> GHC.Base.Just
                                      @ [GHC.Types.Double]
                                      (GHC.Types.: @ GHC.Types.Double x s)
                                 : ipv ipv1 -> GHC.Base.Nothing @ [GHC.Types.Double] }
                            : ipv ipv1 -> GHC.Base.Nothing @ [GHC.Types.Double] } } }
                 } in
                 case s of wild {
                   [] -> fail GHC.Prim.void#
                   : x ds
                   -> case ds of wild1 {
                        [] -> fail GHC.Prim.void#
                        : y ys
                        -> case Main.binaryExpr x y op of wild2 {
                             GHC.Base.Nothing
                             -> case Text.ParserCombinators.ReadP.run
                                       @ GHC.Types.Double
                                       Main.foldingFunction1
                                       op of wild3 {
                                  [] -> GHC.Base.Nothing @ [GHC.Types.Double]
                                  : ds1 ds2
                                  -> case ds1 of wild4 { (,) x1 ds3 ->
                                     case ds3 of wild5 {
                                       []
                                       -> case ds2 of wild6 {
                                            []
                                            -> GHC.Base.Just
                                                 @ [GHC.Types.Double]
                                                 (GHC.Types.: @ GHC.Types.Double x1 wild)
                                            : ipv ipv1 -> GHC.Base.Nothing @ [GHC.Types.Double] }
                                       : ipv ipv1 -> GHC.Base.Nothing @ [GHC.Types.Double] } } }
                             GHC.Base.Just x1
                             -> GHC.Base.Just
                                  @ [GHC.Types.Double]
                                  (GHC.Types.: @ GHC.Types.Double x1 ys) } } }) -}
023fa77106adb38b187da5f42644c87d
  foldingFunction1 :: Text.ParserCombinators.ReadP.P GHC.Types.Double
  {- Unfolding: (GHC.Read.$fReadDouble9
                   GHC.Read.$fReadDouble_$sconvertFrac
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Double
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ GHC.Types.Double)) -}
c159daa01566f24c3f208ac04ada6bf8
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
3bdd72af7e196ad6ee2a143ab8547862
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case Main.main_go
                           (Data.OldList.words ipv1)
                           (GHC.Types.[] @ GHC.Types.Double) of wild {
                      GHC.Base.Nothing -> GHC.Show.$fShowMaybe3
                      GHC.Base.Just x
                      -> case x of wild1 {
                           [] -> GHC.Show.$fShowMaybe3
                           : result ds1
                           -> case ds1 of wild2 {
                                []
                                -> GHC.Base.++
                                     @ GHC.Types.Char
                                     GHC.Show.$fShowMaybe1
                                     (case result of ww { GHC.Types.D# ww1 ->
                                      GHC.Float.$w$sshowSignedFloat
                                        GHC.Float.$fShowDouble_$sshowFloat
                                        GHC.Show.appPrec1
                                        ww1
                                        (GHC.Types.[] @ GHC.Types.Char) })
                                : ipv2 ipv3 -> GHC.Show.$fShowMaybe3 } } })
                   GHC.Types.True
                   ipv }) -}
8204eb4b6aee67134e710745fd35a6ba
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d86e41772406467b3b2dfcda9a262f9d
  main_go ::
    [[GHC.Types.Char]]
    -> [GHC.Types.Double] -> GHC.Base.Maybe [GHC.Types.Double]
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
c38709080abc7545a10aa5f3db6c8b9a
  next :: GHC.Base.Maybe a -> GHC.Base.Maybe a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ds :: GHC.Base.Maybe a) (b :: GHC.Base.Maybe a) ->
                 case ds of wild {
                   GHC.Base.Nothing -> b GHC.Base.Just ipv -> wild }) -}
f752d2d339340b3cf13b276cefb31f5f
  readMaybe :: GHC.Read.Read a => GHC.Base.String -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (st :: GHC.Base.String) ->
                 case GHC.Read.readsPrec
                        @ a
                        $dRead
                        Text.ParserCombinators.ReadPrec.minPrec
                        st of wild {
                   [] -> GHC.Base.Nothing @ a
                   : ds ds1
                   -> case ds of wild1 { (,) x ds2 ->
                      case ds2 of wild2 {
                        []
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Just @ a x : ipv ipv1 -> GHC.Base.Nothing @ a }
                        : ipv ipv1 -> GHC.Base.Nothing @ a } } }) -}
30f93ba504524f4c3d05a81b26cffccf
  solveRPN :: GHC.Base.String -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (st :: GHC.Base.String) ->
                 case Main.main_go
                        (Data.OldList.words st)
                        (GHC.Types.[] @ GHC.Types.Double) of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Types.Double
                   GHC.Base.Just x
                   -> case x of wild1 {
                        [] -> GHC.Base.Nothing @ GHC.Types.Double
                        : result ds
                        -> case ds of wild2 {
                             [] -> GHC.Base.Just @ GHC.Types.Double result
                             : ipv ipv1 -> GHC.Base.Nothing @ GHC.Types.Double } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

